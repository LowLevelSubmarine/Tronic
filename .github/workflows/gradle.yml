# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ master ]
    types: [opened, reopened, labeled, unlabeled, synchronize]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: jesusvasquez333/verify-pr-label-action@v1.1.0
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'
        valid-labels: 'dependencies'
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Integration check
      uses: squalrus/merge-bot@v0.4.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        reviewers: false
        labels: dependencies
    - name: prepare version.sh
      run: chmod a+x version.sh
    - name: upgrade Version
      id: version
      run: |
        echo ::set-output name=VERSION::$(./version.sh)
    - name: build jar
      run: ./gradlew shadowjar
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "build.gradle -> ${{steps.version.outputs.VERSION}" 
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    - name: echo
      run: echo  ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{steps.version.outputs.VERSION}}
        release_name: Version ${{steps.version.outputs.VERSION}}
        body: |
          - Updated dependencies
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/libs/bot-${{steps.version.outputs.VERSION}}-all.jar
        asset_name: bot-${{steps.version.outputs.VERSION}}-all.jar
        asset_content_type:  application/java-archive
    - name: Cleanup 
      run: rm -rf ./build
